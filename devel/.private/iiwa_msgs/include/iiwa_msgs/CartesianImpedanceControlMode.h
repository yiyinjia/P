// Generated by gencpp from file iiwa_msgs/CartesianImpedanceControlMode.msg
// DO NOT EDIT!


#ifndef IIWA_MSGS_MESSAGE_CARTESIANIMPEDANCECONTROLMODE_H
#define IIWA_MSGS_MESSAGE_CARTESIANIMPEDANCECONTROLMODE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <iiwa_msgs/CartesianQuantity.h>
#include <iiwa_msgs/CartesianQuantity.h>

namespace iiwa_msgs
{
template <class ContainerAllocator>
struct CartesianImpedanceControlMode_
{
  typedef CartesianImpedanceControlMode_<ContainerAllocator> Type;

  CartesianImpedanceControlMode_()
    : cartesian_stiffness()
    , cartesian_damping()
    , nullspace_stiffness(0.0)
    , nullspace_damping(0.0)  {
    }
  CartesianImpedanceControlMode_(const ContainerAllocator& _alloc)
    : cartesian_stiffness(_alloc)
    , cartesian_damping(_alloc)
    , nullspace_stiffness(0.0)
    , nullspace_damping(0.0)  {
  (void)_alloc;
    }



   typedef  ::iiwa_msgs::CartesianQuantity_<ContainerAllocator>  _cartesian_stiffness_type;
  _cartesian_stiffness_type cartesian_stiffness;

   typedef  ::iiwa_msgs::CartesianQuantity_<ContainerAllocator>  _cartesian_damping_type;
  _cartesian_damping_type cartesian_damping;

   typedef double _nullspace_stiffness_type;
  _nullspace_stiffness_type nullspace_stiffness;

   typedef double _nullspace_damping_type;
  _nullspace_damping_type nullspace_damping;





  typedef boost::shared_ptr< ::iiwa_msgs::CartesianImpedanceControlMode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iiwa_msgs::CartesianImpedanceControlMode_<ContainerAllocator> const> ConstPtr;

}; // struct CartesianImpedanceControlMode_

typedef ::iiwa_msgs::CartesianImpedanceControlMode_<std::allocator<void> > CartesianImpedanceControlMode;

typedef boost::shared_ptr< ::iiwa_msgs::CartesianImpedanceControlMode > CartesianImpedanceControlModePtr;
typedef boost::shared_ptr< ::iiwa_msgs::CartesianImpedanceControlMode const> CartesianImpedanceControlModeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::iiwa_msgs::CartesianImpedanceControlMode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::iiwa_msgs::CartesianImpedanceControlMode_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace iiwa_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'iiwa_msgs': ['/home/turtlebot3remote/iiwa_stack_ws/src/iiwa_stack/iiwa_msgs/msg', '/home/turtlebot3remote/iiwa_stack_ws/devel/.private/iiwa_msgs/share/iiwa_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::iiwa_msgs::CartesianImpedanceControlMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iiwa_msgs::CartesianImpedanceControlMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iiwa_msgs::CartesianImpedanceControlMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iiwa_msgs::CartesianImpedanceControlMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iiwa_msgs::CartesianImpedanceControlMode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iiwa_msgs::CartesianImpedanceControlMode_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::iiwa_msgs::CartesianImpedanceControlMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7c03442e16efac806b59fb2795f102eb";
  }

  static const char* value(const ::iiwa_msgs::CartesianImpedanceControlMode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7c03442e16efac80ULL;
  static const uint64_t static_value2 = 0x6b59fb2795f102ebULL;
};

template<class ContainerAllocator>
struct DataType< ::iiwa_msgs::CartesianImpedanceControlMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "iiwa_msgs/CartesianImpedanceControlMode";
  }

  static const char* value(const ::iiwa_msgs::CartesianImpedanceControlMode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::iiwa_msgs::CartesianImpedanceControlMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
# Stiffness values [x, y, z, a, b, c] for the cartesian impedance, x, y, z in [N/m], a, b, c in [Nm/rad]. \n\
# Precondition: 0.0 <= x, y, z <= 5000.0 and 0.0 <= a, b, c <= 300.0. \n\
CartesianQuantity cartesian_stiffness\n\
\n\
# Dimensionless damping values for the cartesian impedance control, for all degrees of freedom : [x, y, z, a, b, c].\n\
# Precondition: 0.1 <= x, y, z, a, b, c <= 1.0. \n\
CartesianQuantity cartesian_damping\n\
\n\
# The stiffness value for null space [Nm/rad]. \n\
# Precondition: 0.0 <= value. \n\
float64 nullspace_stiffness\n\
\n\
# The damping parameter for null space [Nm*s/rad]. \n\
# Precondition: value >= 0.3 and value <= 1.0. - A good damping value is 0.7. \n\
float64 nullspace_damping\n\
================================================================================\n\
MSG: iiwa_msgs/CartesianQuantity\n\
float32 x\n\
float32 y\n\
float32 z\n\
float32 a\n\
float32 b\n\
float32 c\n\
";
  }

  static const char* value(const ::iiwa_msgs::CartesianImpedanceControlMode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::iiwa_msgs::CartesianImpedanceControlMode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cartesian_stiffness);
      stream.next(m.cartesian_damping);
      stream.next(m.nullspace_stiffness);
      stream.next(m.nullspace_damping);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CartesianImpedanceControlMode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iiwa_msgs::CartesianImpedanceControlMode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::iiwa_msgs::CartesianImpedanceControlMode_<ContainerAllocator>& v)
  {
    s << indent << "cartesian_stiffness: ";
    s << std::endl;
    Printer< ::iiwa_msgs::CartesianQuantity_<ContainerAllocator> >::stream(s, indent + "  ", v.cartesian_stiffness);
    s << indent << "cartesian_damping: ";
    s << std::endl;
    Printer< ::iiwa_msgs::CartesianQuantity_<ContainerAllocator> >::stream(s, indent + "  ", v.cartesian_damping);
    s << indent << "nullspace_stiffness: ";
    Printer<double>::stream(s, indent + "  ", v.nullspace_stiffness);
    s << indent << "nullspace_damping: ";
    Printer<double>::stream(s, indent + "  ", v.nullspace_damping);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IIWA_MSGS_MESSAGE_CARTESIANIMPEDANCECONTROLMODE_H
